import { elements } from "./elements.js";

let safeBrackets = [
	"bracket2",
	"bracket8",
	"bracket13",
	"bracket19",
	"bracket24",
	"bracket30",
	"bracket35",
	"bracket41",
];

let colors = {
	red: "#f23b3b",
	green: "#328b32",
	blue: "#7171bb",
	orange: "#34ea26",
};

let players = {
	red: {
		start: "bracket2",
		finish: "bracket44",
		next: "green",
	},

	green: {
		start: "bracket13",
		finish: "bracket11",
		next: "orange",
	},

	orange: {
		start: "bracket24",
		finish: "bracket22",
		next: "blue",
	},

	blue: {
		start: "bracket35",
		finish: "bracket33",
		next: "red",
	},
};

let currentTurn;
let currentTurnPlayers;

let faceValue;

//this sets the basic properties of the board
setBoard();

function setBoard() {
	//the game starts from red
	currentTurn = "red";

	setTurn(currentTurn);

	setTheDice();
}

//turn is given to whatever color is in currentTurn
function setTurn(turn) {
	currentTurn = turn;

	elements.turnTags.forEach((tag) => {
		if (tag.classList.contains(`${turn}-turn-tag`)) {
			tag.classList.add("show");
		} else {
			tag.classList.remove("show");
		}
	});

	setDiceColor(currentTurn);
}

//it sets the color of the dice of that of the currentTurn
function setDiceColor(currentTurn) {
	elements.dice.style.backgroundColor = colors[currentTurn];
}

// elements.safeBrackets.forEach((bracket) => {
// 	bracket.innerText = "x";
// });

elements.brackets.forEach((bracket) => {
	if (!bracket.classList.contains("safe-bracket")) {
		bracket.innerText = "";
	}
});

//event listener to listen for clicking of the dice
elements.dice.addEventListener("click", (event) => {
	if (
		event.target.classList.contains("face") ||
		event.target.classList.contains("point")
	) {
		rollTheDice(currentTurn);
	}
});

//sets the dice to a random face
function setTheDice() {
	let faceId = generateRandomFaceId();

	setFace(faceId);
}

//it generates a random faceId for the dice
function generateRandomFaceId() {
	let faceId = `face${Math.ceil(Math.random() * 6)}`;
	return faceId;
}

//rolls the dice to a random face
function rollTheDice(currentTurn) {
	let faceId = generateRandomFaceId();
	currentTurnPlayers = document.querySelectorAll(`.${currentTurn}-player`);

	let currentInHousePlayers = Array.from(currentTurnPlayers).filter(
		(player) => {
			if (player.classList.contains(`${currentTurn}-player`)) {
				return player;
			}
		}
	);

	showAnimation();

	setTimeout(function () {
		setFace(faceId);

		hideAnimation();

		faceValue = document.getElementById(faceId).children.length;

		if (faceValue !== 6) {
			currentTurnPlayers.forEach((player) => {
				glow(player);
			});
		} else {
			let currentOutsidePlayers = document.querySelectorAll(
				`.outside-player.${currentTurn}-player`
			);
			console.log(currentOutsidePlayers);
			if (currentOutsidePlayers.length > 0) {
				Array.from(currentOutsidePlayers).forEach((player) => {
					glow(player);
				});
			} else {
				setTurn(players[currentTurn].next);
			}
		}
	}, 900);
}

//it shows the animation of the roll of the dice
function showAnimation() {
	elements.dice.style.animation = ` diceRollAnimation 300ms ease-in 3  `;
}

//it sets the dice to the random number generated by rollTheDice() function
function setFace(faceId) {
	elements.faces.forEach((face) => {
		if (face.id === faceId) {
			face.classList.add("turn");
			face.classList.remove("hide");
		} else {
			face.classList.add("hide");
			face.classList.remove("turn");
		}
	});
}

//it hides the animation of the roll of the dice
function hideAnimation() {
	elements.dice.style.animation = "none";
}

//it makes the currentTurnPlayers glow
function glow(player) {
	player.classList.add("glow");
}

//event listener for when the user clickes one of the glowing currentTurn players
elements.gameBoard.addEventListener("click", (event) => {
	if (event.target.classList.contains("glow")) {
		stopGlowing(document.querySelectorAll(".player"));

		if (event.target.classList.contains("in-house-player")) {
			movePlayerToBracketId(event.target, players[currentTurn].start);
		} else {
			moveForward(event.target, event.target.parentNode.id);
		}
	}
});

//it stops the glowing of all currentTurnPlayers
function stopGlowing(players) {
	players.forEach((player) => {
		player.classList.remove("glow");
	});
}

//it moves the clicked player to the bracket of the id
function movePlayerToBracketId(player, nextBracketId) {
	if (player.classList.contains("in-house-player")) {
		player.classList.remove("in-house-player");
		player.classList.add("outside-player");
	}

	let playerClass = String(player.classList);
	let playerId = player.id;

	let bracket = document.getElementById(nextBracketId);

	player.remove();

	bracket.innerHTML += ` <div class="${playerClass}" id=${playerId}></div> `;

	checkEachBracket();
	// if (bracket.children.length > 1) {
	// 	if (bracket.children.length === 2) {
	// 		bracket.children[0].classList.add("shift-left");
	// 		bracket.children[1].classList.add("shift-right");
	// 	} else if (bracket.children.length === 3) {
	// 		bracket.children[0].classList.add("shift-left");
	// 		bracket.children[1].classList.add("shift-right");
	// 		bracket.children[2].classList.add("shift-top");
	// 	} else if (bracket.children.length === 4) {
	// 		bracket.children[0].classList.add("shift-left");
	// 		bracket.children[1].classList.add("shift-right");
	// 		bracket.children[2].classList.add("shift-top");
	// 		bracket.children[3].classList.add("shift-bottom");
	// 	}
	// }
}

//it moves the clicked player forward
function moveForward(player, bracketId) {
	let nextBracketId = getNextBracketId(bracketId, faceValue);
	setTimeout(function () {
		movePlayerToBracketId(player, nextBracketId);
		setTurn(players[currentTurn].next);
	}, 150);
}

//it gets the id of the next bracket
function getNextBracketId(bracketId, count) {
	let currentBracketIdArr = bracketId.split("");
	let currentBracketIdNumArr = currentBracketIdArr.filter((ele) => {
		if (Number(ele) === Number(ele)) {
			return ele;
		}
	});
	let currentBracketIdNum = Number(currentBracketIdNumArr.join(""));
	return `bracket${currentBracketIdNum + count}`;
}

function checkEachBracket() {
	let brackets = document.querySelectorAll(".bracket");

	brackets.forEach((bracket) => {
		if (bracket.children.length > 1) {
			if (bracket.children.length === 2) {
				bracket.children[0].classList.add("shift-left");
				bracket.children[1].classList.add("shift-right");
			} else if (bracket.children.length === 3) {
				bracket.children[0].classList.add("shift-left");
				bracket.children[1].classList.add("shift-right");
				bracket.children[2].classList.add("shift-top");
			} else if (bracket.children.length === 4) {
				bracket.children[0].classList.add("shift-left");
				bracket.children[1].classList.add("shift-right");
				bracket.children[2].classList.add("shift-top");
				bracket.children[3].classList.add("shift-bottom");
			}
		} else {
			Array.from(bracket.children).forEach((child) => {
				child.classList.remove("shift-left");
				child.classList.remove("shift-right");
				child.classList.remove("shift-top");
				child.classList.remove("shift-bottom");
			});
		}
	});
}
